\c nevadwh_dwh;

CREATE extension postgres_fdw;

CREATE SERVER client_ods FOREIGN DATA WRAPPER postgres_fdw OPTIONS (dbname 'nevadwh_ods', host '127.0.0.1', port '5432');

CREATE USER MAPPING FOR postgres SERVER client_ods OPTIONS ( USER 'postgres', PASSWORD 'postgres');

CREATE SCHEMA IF NOT EXISTS bulk;
CREATE SCHEMA IF NOT EXISTS fdw;
CREATE SCHEMA IF NOT EXISTS ods;
CREATE SCHEMA IF NOT EXISTS staging;
CREATE SCHEMA IF NOT EXISTS target;

CREATE TABLE IF NOT EXISTS public.data_source(
    data_source_id smallint       NOT NULL,
    name           character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "PK_data_source" PRIMARY KEY (data_source_id)
);
CREATE TABLE IF NOT EXISTS public.session_log 
(
    session_log_id   bigint    NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    session_id       bigint   NOT NULL,
    session_state_id smallint  NOT NULL,
    error_message    character varying(4000) COLLATE pg_catalog."default",
    dt_create        timestamp with time zone  CONSTRAINT DF_session_log_date_DEFAULT DEFAULT (now()) NOT NULL,
    CONSTRAINT "PK_session_log" PRIMARY KEY (session_log_id)
);

CREATE TABLE IF NOT EXISTS public.session_state 
(
    session_state_id smallint       NOT NULL,
    name             character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "PK_session_state" PRIMARY KEY (session_state_id )
);


CREATE TABLE IF NOT EXISTS public.session (
    session_id         bigint      NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    dwh_session_id     bigint      NULL,
    landing_session_id bigint  NULL,
    data_source_id     smallint    NOT NULL,
    session_state_id   smallint    NOT NULL,
    rows_count         bigint  NULL,
    create_session     timestamp with time zone NULL,    
    error_message      character varying(4000) COLLATE pg_catalog."default" NULL,
    dt_update          timestamp with time zone  CONSTRAINT DF_session_update_date_DEFAULT DEFAULT (now()) NOT NULL,
    dt_create          timestamp with time zone  CONSTRAINT DF_session_create_date_DEFAULT DEFAULT (now()) NOT NULL,
    CONSTRAINT PK_session PRIMARY KEY (session_id)
);




CREATE OR REPLACE FUNCTION  "fn_GetMaxDate"()
RETURNS timestamp
AS $BODY$
BEGIN
  RETURN make_date(2100, 1 , 1);
END;
$BODY$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION  "fn_GetMinDate"()
RETURNS timestamp
AS $BODY$
BEGIN
  RETURN make_date(1900, 1 , 1);
END;
$BODY$
LANGUAGE plpgsql;


DO
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE "sp_SaveSessionState"';
END;
$$;
/*
call public."sp_SaveSessionState" (null::bigint, 1::bigint, 1::bigint, 1::smallint, 1::smallint, now()::timestamp, null::varchar(4000) ) 
SELECT * FROM session
SELECT COALESE(par_create_session, now())
*/
CREATE OR REPLACE PROCEDURE "sp_SaveSessionState" (
    par_session_id INOUT bigint DEFAULT NULL, 
    par_dwh_session_id IN bigint DEFAULT NULL, 
    par_rows_count  IN bigint DEFAULT NULL, 
    par_data_source_id IN smallint DEFAULT NULL, 
    par_session_state_id IN smallint DEFAULT NULL, 
    par_create_session IN timestamp DEFAULT NULL, 
    par_error_message IN varchar(4000) DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount INTEGER;
    
BEGIN

    IF par_session_id IS NULL THEN
        SELECT COALESCE(par_create_session, now()) into par_create_session;
        SELECT COALESCE(par_session_state_id, 1) into par_session_state_id;
        INSERT INTO session (data_source_id, session_state_id, rows_count, create_session, dwh_session_id)
        VALUES(par_data_source_id, par_session_state_id, par_rows_count, par_create_session, par_dwh_session_id);
        
        SELECT currval(pg_get_serial_sequence('session','session_id')) into par_session_id;
        RETURN;
    ELSE
    
        UPDATE session
            SET 
                session_state_id = par_session_state_id,    
                error_message = par_error_message,
                dt_update = now()
        WHERE session_id = par_session_id;
    END IF;

END;

$BODY$
LANGUAGE plpgsql;
    
do
$$
BEGIN
RAISE NOTICE 'Create table fdw.DIM_Валюты';
END;
$$;
DROP FOREIGN TABLE IF EXISTS fdw."odins_DIM_Валюты";

CREATE FOREIGN TABLE IF NOT EXISTS fdw."odins_DIM_Валюты" (
    dwh_session_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Code"        varchar(128),
    "Description"        varchar(128),
    "ЗагружаетсяИзИнтернета"        boolean,
    "НаименованиеПолное"        varchar(50),
    "Наценка"        decimal(10, 2),
    "ОсновнаяВалюта"        varchar(36),
    "ПараметрыПрописи"        varchar(200),
    "ФормулаРасчетаКурса"        varchar(100),
    "СпособУстановкиКурса"        varchar(500),
    dt_create        timestamp without time zone default now()
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Валюты_history');
COMMENT ON FOREIGN TABLE fdw."odins_DIM_Валюты" IS '{"Description":"DIM_Валюты_history"}';

do
$$
BEGIN
RAISE NOTICE 'Create table fdw.DIM_Валюты_Представления';
END;
$$;
DROP FOREIGN TABLE IF EXISTS fdw."odins_DIM_Валюты_Представления";

CREATE FOREIGN TABLE IF NOT EXISTS fdw."odins_DIM_Валюты_Представления" (
    dwh_session_id    bigint,
    nkey              uuid NOT NULL,
    "DIM_ВалютыRefID"        uuid,
    "КодЯзыка"        varchar(10),
    "ПараметрыПрописи"        varchar(200),
    dt_create        timestamp without time zone default now()
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Валюты_Представления_history');
COMMENT ON FOREIGN TABLE fdw."odins_DIM_Валюты_Представления" IS '{"Description":"DIM_Валюты.Представления_history"}';

do
$$
BEGIN
RAISE NOTICE 'Create table fdw.DIM_Клиенты';
END;
$$;
DROP FOREIGN TABLE IF EXISTS fdw."odins_DIM_Клиенты";

CREATE FOREIGN TABLE IF NOT EXISTS fdw."odins_DIM_Клиенты" (
    dwh_session_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Code"        varchar(128),
    "Description"        varchar(128),
    "Контакт"        varchar(500),
    dt_create        timestamp without time zone default now()
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Клиенты_history');
COMMENT ON FOREIGN TABLE fdw."odins_DIM_Клиенты" IS '{"Description":"DIM_Клиенты_history"}';

do
$$
BEGIN
RAISE NOTICE 'Create table fdw.DIM_Товары';
END;
$$;
DROP FOREIGN TABLE IF EXISTS fdw."odins_DIM_Товары";

CREATE FOREIGN TABLE IF NOT EXISTS fdw."odins_DIM_Товары" (
    dwh_session_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Code"        varchar(128),
    "Description"        varchar(128),
    "Описание"        varchar(255),
    dt_create        timestamp without time zone default now()
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Товары_history');
COMMENT ON FOREIGN TABLE fdw."odins_DIM_Товары" IS '{"Description":"DIM_Товары_history"}';

do
$$
BEGIN
RAISE NOTICE 'Create table fdw.FACT_Продажи';
END;
$$;
DROP FOREIGN TABLE IF EXISTS fdw."odins_FACT_Продажи";

CREATE FOREIGN TABLE IF NOT EXISTS fdw."odins_FACT_Продажи" (
    dwh_session_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Number"        integer,
    "Posted"        boolean,
    "Date"        timestamp,
    "ДатаОтгрузки"        timestamp,
    "Клиент"        varchar(36),
    "ТипДоставки"        varchar(500),
    "ПримерСоставногоТипа"        varchar(36),
    "ПримерСоставногоТипа_ТипЗначения"        varchar(128),
    dt_create        timestamp without time zone default now()
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'FACT_Продажи_history');
COMMENT ON FOREIGN TABLE fdw."odins_FACT_Продажи" IS '{"Description":"FACT_Продажи_history"}';

do
$$
BEGIN
RAISE NOTICE 'Create table fdw.FACT_Продажи_Товары';
END;
$$;
DROP FOREIGN TABLE IF EXISTS fdw."odins_FACT_Продажи_Товары";

CREATE FOREIGN TABLE IF NOT EXISTS fdw."odins_FACT_Продажи_Товары" (
    dwh_session_id    bigint,
    nkey              uuid NOT NULL,
    "FACT_ПродажиRefID"        uuid,
    "Доставка"        boolean,
    "Товар"        varchar(36),
    "Колличество"        decimal(12, 0),
    "Цена"        decimal(16, 4),
    dt_create        timestamp without time zone default now()
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'FACT_Продажи_Товары_history');
COMMENT ON FOREIGN TABLE fdw."odins_FACT_Продажи_Товары" IS '{"Description":"FACT_Продажи.Товары_history"}';

do
$$
BEGIN
RAISE NOTICE 'Create foreign table ods.odins_DIM_Валюты';
END;
$$;

CREATE FOREIGN TABLE IF NOT EXISTS ods."odins_DIM_Валюты" (
    ods_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Code"        varchar(128),
    "Description"        varchar(128),
    "ЗагружаетсяИзИнтернета"        boolean,
    "НаименованиеПолное"        varchar(50),
    "Наценка"        decimal(10, 2),
    "ОсновнаяВалюта"        varchar(36),
    "ПараметрыПрописи"        varchar(200),
    "ФормулаРасчетаКурса"        varchar(100),
    "СпособУстановкиКурса"        varchar(500),
    dt_update        timestamp without time zone, 
    dt_create        timestamp without time zone 
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Валюты');
COMMENT ON FOREIGN TABLE ods."odins_DIM_Валюты" IS '{"Description":"DIM_Валюты"}';

do
$$
BEGIN
RAISE NOTICE 'Create foreign table ods.odins_DIM_Клиенты';
END;
$$;

CREATE FOREIGN TABLE IF NOT EXISTS ods."odins_DIM_Клиенты" (
    ods_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Code"        varchar(128),
    "Description"        varchar(128),
    "Контакт"        varchar(500),
    dt_update        timestamp without time zone, 
    dt_create        timestamp without time zone 
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Клиенты');
COMMENT ON FOREIGN TABLE ods."odins_DIM_Клиенты" IS '{"Description":"DIM_Клиенты"}';

do
$$
BEGIN
RAISE NOTICE 'Create foreign table ods.odins_DIM_Товары';
END;
$$;

CREATE FOREIGN TABLE IF NOT EXISTS ods."odins_DIM_Товары" (
    ods_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Code"        varchar(128),
    "Description"        varchar(128),
    "Описание"        varchar(255),
    dt_update        timestamp without time zone, 
    dt_create        timestamp without time zone 
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'DIM_Товары');
COMMENT ON FOREIGN TABLE ods."odins_DIM_Товары" IS '{"Description":"DIM_Товары"}';

do
$$
BEGIN
RAISE NOTICE 'Create foreign table ods.odins_FACT_Продажи';
END;
$$;

CREATE FOREIGN TABLE IF NOT EXISTS ods."odins_FACT_Продажи" (
    ods_id    bigint,
    nkey              uuid NOT NULL,
    "RefID"        uuid,
    "DeletionMark"        boolean,
    "Number"        integer,
    "Posted"        boolean,
    "Date"        timestamp,
    "ДатаОтгрузки"        timestamp,
    "Клиент"        varchar(36),
    "ТипДоставки"        varchar(500),
    "ПримерСоставногоТипа"        varchar(36),
    "ПримерСоставногоТипа_ТипЗначения"        varchar(128),
    dt_update        timestamp without time zone, 
    dt_create        timestamp without time zone 
)
SERVER client_ods OPTIONS (schema_name 'odins', table_name 'FACT_Продажи');
COMMENT ON FOREIGN TABLE ods."odins_FACT_Продажи" IS '{"Description":"FACT_Продажи"}';

do
$$
BEGIN
RAISE NOTICE 'Create view ods.DIM_Валюты';
END;
$$;

DROP VIEW IF EXISTS ods."v_DIM_Валюты";

CREATE VIEW ods."v_DIM_Валюты" 
AS
SELECT
    -1 * ods_id::bigint AS id,
    0::bigint session_id,
    'ods1c'::varchar(128) AS source_name,
    nkey,
    NULL::uuid AS vkey,
    now()::timestamp without time zone AS start_date,
    public."fn_GetMaxDate"()::timestamp without time zone AS end_date,
    "RefID",
    "DeletionMark",
    "Code",
    "Description",
    "ЗагружаетсяИзИнтернета",
    "НаименованиеПолное",
    "Наценка",
    "ОсновнаяВалюта",
    "ПараметрыПрописи",
    "ФормулаРасчетаКурса",
    "СпособУстановкиКурса",
    0::bigint AS session_id_update,
    dt_update::timestamp without time zone,
    dt_create::timestamp without time zone
FROM ods."odins_DIM_Валюты";

do
$$
BEGIN
RAISE NOTICE 'Create view ods.DIM_Клиенты';
END;
$$;

DROP VIEW IF EXISTS ods."v_DIM_Клиенты";

CREATE VIEW ods."v_DIM_Клиенты" 
AS
SELECT
    -1 * ods_id::bigint AS id,
    0::bigint session_id,
    'ods1c'::varchar(128) AS source_name,
    nkey,
    NULL::uuid AS vkey,
    now()::timestamp without time zone AS start_date,
    public."fn_GetMaxDate"()::timestamp without time zone AS end_date,
    "RefID",
    "DeletionMark",
    "Code",
    "Description",
    "Контакт",
    0::bigint AS session_id_update,
    dt_update::timestamp without time zone,
    dt_create::timestamp without time zone
FROM ods."odins_DIM_Клиенты";

do
$$
BEGIN
RAISE NOTICE 'Create view ods.DIM_Товары';
END;
$$;

DROP VIEW IF EXISTS ods."v_DIM_Товары";

CREATE VIEW ods."v_DIM_Товары" 
AS
SELECT
    -1 * ods_id::bigint AS id,
    0::bigint session_id,
    'ods1c'::varchar(128) AS source_name,
    nkey,
    NULL::uuid AS vkey,
    now()::timestamp without time zone AS start_date,
    public."fn_GetMaxDate"()::timestamp without time zone AS end_date,
    "RefID",
    "DeletionMark",
    "Code",
    "Description",
    "Описание",
    0::bigint AS session_id_update,
    dt_update::timestamp without time zone,
    dt_create::timestamp without time zone
FROM ods."odins_DIM_Товары";

do
$$
BEGIN
RAISE NOTICE 'Create view ods.FACT_Продажи';
END;
$$;

DROP VIEW IF EXISTS ods."v_FACT_Продажи";

CREATE VIEW ods."v_FACT_Продажи" 
AS
SELECT
    -1 * ods_id::bigint AS id,
    0::bigint session_id,
    'ods1c'::varchar(128) AS source_name,
    nkey,
    NULL::uuid AS vkey,
    now()::timestamp without time zone AS start_date,
    public."fn_GetMaxDate"()::timestamp without time zone AS end_date,
    "RefID",
    "DeletionMark",
    "Number",
    "Posted",
    "Date",
    "ДатаОтгрузки",
    "Клиент",
    "ТипДоставки",
    "ПримерСоставногоТипа",
    "ПримерСоставногоТипа_ТипЗначения",
    0::bigint AS session_id_update,
    dt_update::timestamp without time zone,
    dt_create::timestamp without time zone
FROM ods."odins_FACT_Продажи";

do
$$
BEGIN
RAISE NOTICE 'Create table staging.DIM_Валюты';
END;
$$;
CREATE TABLE IF NOT EXISTS staging."DIM_Валюты" (
    staging_id        bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    id                bigint NULL,
    session_id        bigint NULL,
    source_name       varchar(128) NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NULL,
    end_date          timestamp without time zone NULL,
    "RefID"            uuid  NULL,
    "DeletionMark"            boolean  NULL,
    "Code"            varchar(128)  NULL,
    "Description"            varchar(128)  NULL,
    "ЗагружаетсяИзИнтернета"            boolean  NULL,
    "НаименованиеПолное"            varchar(50)  NULL,
    "Наценка"            decimal(10, 2)  NULL,
    "ОсновнаяВалюта"            varchar(36)  NULL,
    "ПараметрыПрописи"            varchar(200)  NULL,
    "ФормулаРасчетаКурса"            varchar(100)  NULL,
    "СпособУстановкиКурса"            varchar(500)  NULL,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone        NULL
);
do
$$
BEGIN
RAISE NOTICE 'Create table staging.DIM_Валюты.Представления';
END;
$$;
CREATE TABLE IF NOT EXISTS staging."DIM_Валюты_Представления" (
    staging_id        bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    id                bigint NULL,
    session_id        bigint NULL,
    source_name       varchar(128) NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NULL,
    end_date          timestamp without time zone NULL,
    "DIM_ВалютыRefID"            uuid  NULL,
    "КодЯзыка"            varchar(10)  NULL,
    "ПараметрыПрописи"            varchar(200)  NULL,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone        NULL
);
do
$$
BEGIN
RAISE NOTICE 'Create table staging.DIM_Клиенты';
END;
$$;
CREATE TABLE IF NOT EXISTS staging."DIM_Клиенты" (
    staging_id        bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    id                bigint NULL,
    session_id        bigint NULL,
    source_name       varchar(128) NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NULL,
    end_date          timestamp without time zone NULL,
    "RefID"            uuid  NULL,
    "DeletionMark"            boolean  NULL,
    "Code"            varchar(128)  NULL,
    "Description"            varchar(128)  NULL,
    "Контакт"            varchar(500)  NULL,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone        NULL
);
do
$$
BEGIN
RAISE NOTICE 'Create table staging.DIM_Товары';
END;
$$;
CREATE TABLE IF NOT EXISTS staging."DIM_Товары" (
    staging_id        bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    id                bigint NULL,
    session_id        bigint NULL,
    source_name       varchar(128) NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NULL,
    end_date          timestamp without time zone NULL,
    "RefID"            uuid  NULL,
    "DeletionMark"            boolean  NULL,
    "Code"            varchar(128)  NULL,
    "Description"            varchar(128)  NULL,
    "Описание"            varchar(255)  NULL,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone        NULL
);
do
$$
BEGIN
RAISE NOTICE 'Create table staging.FACT_Продажи';
END;
$$;
CREATE TABLE IF NOT EXISTS staging."FACT_Продажи" (
    staging_id        bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    id                bigint NULL,
    session_id        bigint NULL,
    source_name       varchar(128) NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NULL,
    end_date          timestamp without time zone NULL,
    "RefID"            uuid  NULL,
    "DeletionMark"            boolean  NULL,
    "Number"            integer  NULL,
    "Posted"            boolean  NULL,
    "Date"            timestamp  NULL,
    "ДатаОтгрузки"            timestamp  NULL,
    "Клиент"            varchar(36)  NULL,
    "ТипДоставки"            varchar(500)  NULL,
    "ПримерСоставногоТипа"            varchar(36)  NULL,
    "ПримерСоставногоТипа_ТипЗначения"            varchar(128)  NULL,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone        NULL
);
do
$$
BEGIN
RAISE NOTICE 'Create table staging.FACT_Продажи.Товары';
END;
$$;
CREATE TABLE IF NOT EXISTS staging."FACT_Продажи_Товары" (
    staging_id        bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    id                bigint NULL,
    session_id        bigint NULL,
    source_name       varchar(128) NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NULL,
    end_date          timestamp without time zone NULL,
    "FACT_ПродажиRefID"            uuid  NULL,
    "Доставка"            boolean  NULL,
    "Товар"            varchar(36)  NULL,
    "Колличество"            decimal(12, 0)  NULL,
    "Цена"            decimal(16, 4)  NULL,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone        NULL
);
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Валюты_p"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Валюты_p" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount INTEGER;
BEGIN

    UPDATE target."DIM_Валюты" AS trg SET
        session_id = stg.session_id,
        start_date = stg.start_date,
        end_date = stg.end_date,
        session_id_update = stg.session_id_update,
        dt_update = stg.dt_update,
        "RefID" = stg."RefID",
        "DeletionMark" = stg."DeletionMark",
        "Code" = stg."Code",
        "Description" = stg."Description",
        "ЗагружаетсяИзИнтернета" = stg."ЗагружаетсяИзИнтернета",
        "НаименованиеПолное" = stg."НаименованиеПолное",
        "Наценка" = stg."Наценка",
        "ОсновнаяВалюта" = stg."ОсновнаяВалюта",
        "ПараметрыПрописи" = stg."ПараметрыПрописи",
        "ФормулаРасчетаКурса" = stg."ФормулаРасчетаКурса",
        "СпособУстановкиКурса" = stg."СпособУстановкиКурса"
    FROM staging."DIM_Валюты" stg
    WHERE stg.id = trg.id;

    INSERT INTO target."DIM_Валюты" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        dt_create,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "ЗагружаетсяИзИнтернета",
        "НаименованиеПолное",
        "Наценка",
        "ОсновнаяВалюта",
        "ПараметрыПрописи",
        "ФормулаРасчетаКурса",
        "СпособУстановкиКурса"
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        now() as dt_create,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "ЗагружаетсяИзИнтернета",
        "НаименованиеПолное",
        "Наценка",
        "ОсновнаяВалюта",
        "ПараметрыПрописи",
        "ФормулаРасчетаКурса",
        "СпособУстановкиКурса"
    FROM staging."DIM_Валюты"
    WHERE staging_id = id;
    UPDATE target."DIM_Валюты_Представления" AS trg SET
        session_id = stg.session_id,
        start_date = stg.start_date,
        end_date = stg.end_date,
        session_id_update = stg.session_id_update,
        dt_update = stg.dt_update,
        "DIM_ВалютыRefID" = stg."DIM_ВалютыRefID",
        "КодЯзыка" = stg."КодЯзыка",
        "ПараметрыПрописи" = stg."ПараметрыПрописи"
    FROM staging."DIM_Валюты_Представления" stg
    WHERE stg.id = trg.id;

    INSERT INTO target."DIM_Валюты_Представления" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        dt_create,
        "DIM_ВалютыRefID",
        "КодЯзыка",
        "ПараметрыПрописи"
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        now() as dt_create,
        "DIM_ВалютыRefID",
        "КодЯзыка",
        "ПараметрыПрописи"
    FROM staging."DIM_Валюты_Представления"
    WHERE staging_id = id;

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Валюты_r"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Валюты_r" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_LocalCount bigint;
BEGIN

    SELECT create_session INTO val_start_date FROM session WHERE session_id = par_session_id;
    DROP TABLE IF EXISTS "tmp_DIM_Валюты";
    CREATE TEMPORARY TABLE "tmp_DIM_Валюты"(
        identificator uuid
    );

    INSERT INTO "tmp_DIM_Валюты"(identificator)
    SELECT "RefID" FROM staging."DIM_Валюты" as staging;

    UPDATE staging."DIM_Валюты" as staging
        SET id = COALESCE(trget.id, staging.staging_id),
        session_id = COALESCE(trget.session_id, staging.session_id),
        start_date = COALESCE(trget.start_date, staging.start_date)
    FROM staging."DIM_Валюты" as src
        LEFT JOIN target."DIM_Валюты" as trget ON trget.end_date = public."fn_GetMaxDate"() AND trget.nkey = src.nkey AND trget.vkey = src.vkey
    WHERE staging.staging_id = src.staging_id;

    INSERT INTO staging."DIM_Валюты" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "ЗагружаетсяИзИнтернета",
        "НаименованиеПолное",
        "Наценка",
        "ОсновнаяВалюта",
        "ПараметрыПрописи",
        "ФормулаРасчетаКурса",
        "СпособУстановкиКурса",
        session_id_update,
        dt_update
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        val_start_date as end_date,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "ЗагружаетсяИзИнтернета",
        "НаименованиеПолное",
        "Наценка",
        "ОсновнаяВалюта",
        "ПараметрыПрописи",
        "ФормулаРасчетаКурса",
        "СпособУстановкиКурса",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM (
        SELECT source.*
            FROM target."DIM_Валюты" source
            WHERE source.end_date = public."fn_GetMaxDate"() AND
            EXISTS( SELECT 1 FROM staging."DIM_Валюты" as stg WHERE source.nkey = stg.nkey AND source.id <> stg.id )
        ) a;
    GET DIAGNOSTICS var_rowcount = ROW_COUNT;
    par_rowcount := par_rowcount + var_rowcount;
    -- Child 
    DELETE FROM target."DIM_Валюты_Представления" AS b
    USING "tmp_DIM_Валюты" ll
    WHERE b."DIM_ВалютыRefID" = ll.identificator;
    UPDATE staging."DIM_Валюты_Представления" AS staging
        SET id = staging_id;

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Валюты_t"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Валюты_t" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_dwh_session_id bigint;
    val_LastTargetID bigint;
    val_LocalCount bigint;
    val_source_name varchar(128);
    val_tmp varchar(128); 
BEGIN


    TRUNCATE TABLE "staging"."DIM_Валюты";
    SELECT MAX(id) into val_LastTargetID FROM "target"."DIM_Валюты";

    SELECT pg_get_serial_sequence('staging."DIM_Валюты"', 'staging_id') INTO val_tmp;
    val_LastTargetID := COALESCE(val_LastTargetID, 0) + 1;
    PERFORM setval(val_tmp, val_LastTargetID );
    
    SELECT name INTO val_source_name FROM data_source d WHERE d.data_source_id =  1;
    SELECT dwh_session_id INTO val_dwh_session_id FROM session s WHERE session_id = par_session_id;
    SELECT create_session INTO val_start_date FROM session s WHERE session_id = par_session_id;

    INSERT INTO staging."DIM_Валюты" (
        "session_id",
        "source_name",
        "nkey",
        "vkey",
        "start_date",
        "end_date",
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "ЗагружаетсяИзИнтернета",
        "НаименованиеПолное",
        "Наценка",
        "ОсновнаяВалюта",
        "ПараметрыПрописи",
        "ФормулаРасчетаКурса",
        "СпособУстановкиКурса",
        session_id_update,
        dt_update
    )
    SELECT
        par_session_id AS "session_id",
        val_source_name AS "source_name",
        "nkey",
        nkey AS "vkey",
        val_start_date AS "start_date",
        "fn_GetMaxDate"() AS "end_date",
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "ЗагружаетсяИзИнтернета",
        "НаименованиеПолное",
        "Наценка",
        "ОсновнаяВалюта",
        "ПараметрыПрописи",
        "ФормулаРасчетаКурса",
        "СпособУстановкиКурса",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM fdw."odins_DIM_Валюты" tmp
    WHERE dwh_session_id = val_dwh_session_id;
    GET DIAGNOSTICS var_RowCount = ROW_COUNT;
    par_RowCount := par_RowCount + var_RowCount;
    

-- Child DIM_Валюты_Представления 
    TRUNCATE TABLE "staging"."DIM_Валюты_Представления";
    SELECT MAX(id) into val_LastTargetID FROM "target"."DIM_Валюты_Представления";
    IF NOT val_LastTargetID is NULL AND val_LastTargetID >= 1 THEN
        SELECT pg_get_serial_sequence('staging."DIM_Валюты_Представления"', 'staging_id') INTO val_tmp ;
        val_LastTargetID := val_LastTargetID + 1;
        SELECT setval(val_tmp, val_LastTargetID );
    END IF;
    INSERT INTO staging."DIM_Валюты_Представления" (
        "session_id",
        "source_name",
        "nkey",
        "vkey",
        "start_date",
        "end_date",
        "DIM_ВалютыRefID",
        "КодЯзыка",
        "ПараметрыПрописи",
        session_id_update,
        dt_update
    )
    SELECT
        par_session_id AS "session_id",
        val_source_name AS "source_name",
        "nkey",
        nkey AS "vkey",
        val_start_date AS "start_date",
        "fn_GetMaxDate"() AS "end_date",
        "DIM_ВалютыRefID",
        "КодЯзыка",
        "ПараметрыПрописи",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM fdw."odins_DIM_Валюты_Представления" tmp
    WHERE dwh_session_id = val_dwh_session_id;
    GET DIAGNOSTICS var_RowCount = ROW_COUNT;
    par_RowCount := par_RowCount + var_RowCount;
    
END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Клиенты_p"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Клиенты_p" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount INTEGER;
BEGIN

    UPDATE target."DIM_Клиенты" AS trg SET
        session_id = stg.session_id,
        start_date = stg.start_date,
        end_date = stg.end_date,
        session_id_update = stg.session_id_update,
        dt_update = stg.dt_update,
        "RefID" = stg."RefID",
        "DeletionMark" = stg."DeletionMark",
        "Code" = stg."Code",
        "Description" = stg."Description",
        "Контакт" = stg."Контакт"
    FROM staging."DIM_Клиенты" stg
    WHERE stg.id = trg.id;

    INSERT INTO target."DIM_Клиенты" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        dt_create,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Контакт"
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        now() as dt_create,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Контакт"
    FROM staging."DIM_Клиенты"
    WHERE staging_id = id;

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Клиенты_r"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Клиенты_r" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_LocalCount bigint;
BEGIN

    SELECT create_session INTO val_start_date FROM session WHERE session_id = par_session_id;
    DROP TABLE IF EXISTS "tmp_DIM_Клиенты";
    CREATE TEMPORARY TABLE "tmp_DIM_Клиенты"(
        identificator uuid
    );

    INSERT INTO "tmp_DIM_Клиенты"(identificator)
    SELECT "RefID" FROM staging."DIM_Клиенты" as staging;

    UPDATE staging."DIM_Клиенты" as staging
        SET id = COALESCE(trget.id, staging.staging_id),
        session_id = COALESCE(trget.session_id, staging.session_id),
        start_date = COALESCE(trget.start_date, staging.start_date)
    FROM staging."DIM_Клиенты" as src
        LEFT JOIN target."DIM_Клиенты" as trget ON trget.end_date = public."fn_GetMaxDate"() AND trget.nkey = src.nkey AND trget.vkey = src.vkey
    WHERE staging.staging_id = src.staging_id;

    INSERT INTO staging."DIM_Клиенты" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Контакт",
        session_id_update,
        dt_update
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        val_start_date as end_date,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Контакт",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM (
        SELECT source.*
            FROM target."DIM_Клиенты" source
            WHERE source.end_date = public."fn_GetMaxDate"() AND
            EXISTS( SELECT 1 FROM staging."DIM_Клиенты" as stg WHERE source.nkey = stg.nkey AND source.id <> stg.id )
        ) a;
    GET DIAGNOSTICS var_rowcount = ROW_COUNT;
    par_rowcount := par_rowcount + var_rowcount;
    
END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Клиенты_t"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Клиенты_t" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_dwh_session_id bigint;
    val_LastTargetID bigint;
    val_LocalCount bigint;
    val_source_name varchar(128);
    val_tmp varchar(128); 
BEGIN


    TRUNCATE TABLE "staging"."DIM_Клиенты";
    SELECT MAX(id) into val_LastTargetID FROM "target"."DIM_Клиенты";

    SELECT pg_get_serial_sequence('staging."DIM_Клиенты"', 'staging_id') INTO val_tmp;
    val_LastTargetID := COALESCE(val_LastTargetID, 0) + 1;
    PERFORM setval(val_tmp, val_LastTargetID );
    
    SELECT name INTO val_source_name FROM data_source d WHERE d.data_source_id =  1;
    SELECT dwh_session_id INTO val_dwh_session_id FROM session s WHERE session_id = par_session_id;
    SELECT create_session INTO val_start_date FROM session s WHERE session_id = par_session_id;

    INSERT INTO staging."DIM_Клиенты" (
        "session_id",
        "source_name",
        "nkey",
        "vkey",
        "start_date",
        "end_date",
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Контакт",
        session_id_update,
        dt_update
    )
    SELECT
        par_session_id AS "session_id",
        val_source_name AS "source_name",
        "nkey",
        nkey AS "vkey",
        val_start_date AS "start_date",
        "fn_GetMaxDate"() AS "end_date",
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Контакт",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM fdw."odins_DIM_Клиенты" tmp
    WHERE dwh_session_id = val_dwh_session_id;
    GET DIAGNOSTICS var_RowCount = ROW_COUNT;
    par_RowCount := par_RowCount + var_RowCount;
    

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Товары_p"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Товары_p" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount INTEGER;
BEGIN

    UPDATE target."DIM_Товары" AS trg SET
        session_id = stg.session_id,
        start_date = stg.start_date,
        end_date = stg.end_date,
        session_id_update = stg.session_id_update,
        dt_update = stg.dt_update,
        "RefID" = stg."RefID",
        "DeletionMark" = stg."DeletionMark",
        "Code" = stg."Code",
        "Description" = stg."Description",
        "Описание" = stg."Описание"
    FROM staging."DIM_Товары" stg
    WHERE stg.id = trg.id;

    INSERT INTO target."DIM_Товары" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        dt_create,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Описание"
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        now() as dt_create,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Описание"
    FROM staging."DIM_Товары"
    WHERE staging_id = id;

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Товары_r"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Товары_r" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_LocalCount bigint;
BEGIN

    SELECT create_session INTO val_start_date FROM session WHERE session_id = par_session_id;
    DROP TABLE IF EXISTS "tmp_DIM_Товары";
    CREATE TEMPORARY TABLE "tmp_DIM_Товары"(
        identificator uuid
    );

    INSERT INTO "tmp_DIM_Товары"(identificator)
    SELECT "RefID" FROM staging."DIM_Товары" as staging;

    UPDATE staging."DIM_Товары" as staging
        SET id = COALESCE(trget.id, staging.staging_id),
        session_id = COALESCE(trget.session_id, staging.session_id),
        start_date = COALESCE(trget.start_date, staging.start_date)
    FROM staging."DIM_Товары" as src
        LEFT JOIN target."DIM_Товары" as trget ON trget.end_date = public."fn_GetMaxDate"() AND trget.nkey = src.nkey AND trget.vkey = src.vkey
    WHERE staging.staging_id = src.staging_id;

    INSERT INTO staging."DIM_Товары" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Описание",
        session_id_update,
        dt_update
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        val_start_date as end_date,
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Описание",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM (
        SELECT source.*
            FROM target."DIM_Товары" source
            WHERE source.end_date = public."fn_GetMaxDate"() AND
            EXISTS( SELECT 1 FROM staging."DIM_Товары" as stg WHERE source.nkey = stg.nkey AND source.id <> stg.id )
        ) a;
    GET DIAGNOSTICS var_rowcount = ROW_COUNT;
    par_rowcount := par_rowcount + var_rowcount;
    
END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_DIM_Товары_t"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_DIM_Товары_t" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_dwh_session_id bigint;
    val_LastTargetID bigint;
    val_LocalCount bigint;
    val_source_name varchar(128);
    val_tmp varchar(128); 
BEGIN


    TRUNCATE TABLE "staging"."DIM_Товары";
    SELECT MAX(id) into val_LastTargetID FROM "target"."DIM_Товары";

    SELECT pg_get_serial_sequence('staging."DIM_Товары"', 'staging_id') INTO val_tmp;
    val_LastTargetID := COALESCE(val_LastTargetID, 0) + 1;
    PERFORM setval(val_tmp, val_LastTargetID );
    
    SELECT name INTO val_source_name FROM data_source d WHERE d.data_source_id =  1;
    SELECT dwh_session_id INTO val_dwh_session_id FROM session s WHERE session_id = par_session_id;
    SELECT create_session INTO val_start_date FROM session s WHERE session_id = par_session_id;

    INSERT INTO staging."DIM_Товары" (
        "session_id",
        "source_name",
        "nkey",
        "vkey",
        "start_date",
        "end_date",
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Описание",
        session_id_update,
        dt_update
    )
    SELECT
        par_session_id AS "session_id",
        val_source_name AS "source_name",
        "nkey",
        nkey AS "vkey",
        val_start_date AS "start_date",
        "fn_GetMaxDate"() AS "end_date",
        "RefID",
        "DeletionMark",
        "Code",
        "Description",
        "Описание",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM fdw."odins_DIM_Товары" tmp
    WHERE dwh_session_id = val_dwh_session_id;
    GET DIAGNOSTICS var_RowCount = ROW_COUNT;
    par_RowCount := par_RowCount + var_RowCount;
    

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_FACT_Продажи_p"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_FACT_Продажи_p" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount INTEGER;
BEGIN

    UPDATE target."FACT_Продажи" AS trg SET
        session_id = stg.session_id,
        start_date = stg.start_date,
        end_date = stg.end_date,
        session_id_update = stg.session_id_update,
        dt_update = stg.dt_update,
        "RefID" = stg."RefID",
        "DeletionMark" = stg."DeletionMark",
        "Number" = stg."Number",
        "Posted" = stg."Posted",
        "Date" = stg."Date",
        "ДатаОтгрузки" = stg."ДатаОтгрузки",
        "Клиент" = stg."Клиент",
        "ТипДоставки" = stg."ТипДоставки",
        "ПримерСоставногоТипа" = stg."ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения" = stg."ПримерСоставногоТипа_ТипЗначения"
    FROM staging."FACT_Продажи" stg
    WHERE stg.id = trg.id;

    INSERT INTO target."FACT_Продажи" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        dt_create,
        "RefID",
        "DeletionMark",
        "Number",
        "Posted",
        "Date",
        "ДатаОтгрузки",
        "Клиент",
        "ТипДоставки",
        "ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения"
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        now() as dt_create,
        "RefID",
        "DeletionMark",
        "Number",
        "Posted",
        "Date",
        "ДатаОтгрузки",
        "Клиент",
        "ТипДоставки",
        "ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения"
    FROM staging."FACT_Продажи"
    WHERE staging_id = id;
    UPDATE target."FACT_Продажи_Товары" AS trg SET
        session_id = stg.session_id,
        start_date = stg.start_date,
        end_date = stg.end_date,
        session_id_update = stg.session_id_update,
        dt_update = stg.dt_update,
        "FACT_ПродажиRefID" = stg."FACT_ПродажиRefID",
        "Доставка" = stg."Доставка",
        "Товар" = stg."Товар",
        "Колличество" = stg."Колличество",
        "Цена" = stg."Цена"
    FROM staging."FACT_Продажи_Товары" stg
    WHERE stg.id = trg.id;

    INSERT INTO target."FACT_Продажи_Товары" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        dt_create,
        "FACT_ПродажиRefID",
        "Доставка",
        "Товар",
        "Колличество",
        "Цена"
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        session_id_update,
        dt_update,
        now() as dt_create,
        "FACT_ПродажиRefID",
        "Доставка",
        "Товар",
        "Колличество",
        "Цена"
    FROM staging."FACT_Продажи_Товары"
    WHERE staging_id = id;

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_FACT_Продажи_r"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_FACT_Продажи_r" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_LocalCount bigint;
BEGIN

    SELECT create_session INTO val_start_date FROM session WHERE session_id = par_session_id;
    DROP TABLE IF EXISTS "tmp_FACT_Продажи";
    CREATE TEMPORARY TABLE "tmp_FACT_Продажи"(
        identificator uuid
    );

    INSERT INTO "tmp_FACT_Продажи"(identificator)
    SELECT "RefID" FROM staging."FACT_Продажи" as staging;

    UPDATE staging."FACT_Продажи" as staging
        SET id = COALESCE(trget.id, staging.staging_id),
        session_id = COALESCE(trget.session_id, staging.session_id),
        start_date = COALESCE(trget.start_date, staging.start_date)
    FROM staging."FACT_Продажи" as src
        LEFT JOIN target."FACT_Продажи" as trget ON trget.end_date = public."fn_GetMaxDate"() AND trget.nkey = src.nkey AND trget.vkey = src.vkey
    WHERE staging.staging_id = src.staging_id;

    INSERT INTO staging."FACT_Продажи" (
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        end_date,
        "RefID",
        "DeletionMark",
        "Number",
        "Posted",
        "Date",
        "ДатаОтгрузки",
        "Клиент",
        "ТипДоставки",
        "ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения",
        session_id_update,
        dt_update
    )
    SELECT
        id,
        session_id,
        source_name,
        nkey,
        vkey,
        start_date,
        val_start_date as end_date,
        "RefID",
        "DeletionMark",
        "Number",
        "Posted",
        "Date",
        "ДатаОтгрузки",
        "Клиент",
        "ТипДоставки",
        "ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM (
        SELECT source.*
            FROM target."FACT_Продажи" source
            WHERE source.end_date = public."fn_GetMaxDate"() AND
            EXISTS( SELECT 1 FROM staging."FACT_Продажи" as stg WHERE source.nkey = stg.nkey AND source.id <> stg.id )
        ) a;
    GET DIAGNOSTICS var_rowcount = ROW_COUNT;
    par_rowcount := par_rowcount + var_rowcount;
    -- Child 
    DELETE FROM target."FACT_Продажи_Товары" AS b
    USING "tmp_FACT_Продажи" ll
    WHERE b."FACT_ПродажиRefID" = ll.identificator;
    UPDATE staging."FACT_Продажи_Товары" AS staging
        SET id = staging_id;

END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'CREATE PROCEDURE staging."sp_FACT_Продажи_t"';
END;
$$;

CREATE OR REPLACE PROCEDURE staging."sp_FACT_Продажи_t" (
    par_session_id in int DEFAULT NULL, 
    par_RowCount inout int DEFAULT NULL 
)
AS $BODY$
DECLARE
    var_RowCount int;
    val_start_date timestamp without time zone;
    val_dwh_session_id bigint;
    val_LastTargetID bigint;
    val_LocalCount bigint;
    val_source_name varchar(128);
    val_tmp varchar(128); 
BEGIN


    TRUNCATE TABLE "staging"."FACT_Продажи";
    SELECT MAX(id) into val_LastTargetID FROM "target"."FACT_Продажи";

    SELECT pg_get_serial_sequence('staging."FACT_Продажи"', 'staging_id') INTO val_tmp;
    val_LastTargetID := COALESCE(val_LastTargetID, 0) + 1;
    PERFORM setval(val_tmp, val_LastTargetID );
    
    SELECT name INTO val_source_name FROM data_source d WHERE d.data_source_id =  1;
    SELECT dwh_session_id INTO val_dwh_session_id FROM session s WHERE session_id = par_session_id;
    SELECT create_session INTO val_start_date FROM session s WHERE session_id = par_session_id;

    INSERT INTO staging."FACT_Продажи" (
        "session_id",
        "source_name",
        "nkey",
        "vkey",
        "start_date",
        "end_date",
        "RefID",
        "DeletionMark",
        "Number",
        "Posted",
        "Date",
        "ДатаОтгрузки",
        "Клиент",
        "ТипДоставки",
        "ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения",
        session_id_update,
        dt_update
    )
    SELECT
        par_session_id AS "session_id",
        val_source_name AS "source_name",
        "nkey",
        nkey AS "vkey",
        val_start_date AS "start_date",
        "fn_GetMaxDate"() AS "end_date",
        "RefID",
        "DeletionMark",
        "Number",
        "Posted",
        "Date",
        "ДатаОтгрузки",
        "Клиент",
        "ТипДоставки",
        "ПримерСоставногоТипа",
        "ПримерСоставногоТипа_ТипЗначения",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM fdw."odins_FACT_Продажи" tmp
    WHERE dwh_session_id = val_dwh_session_id;
    GET DIAGNOSTICS var_RowCount = ROW_COUNT;
    par_RowCount := par_RowCount + var_RowCount;
    

-- Child FACT_Продажи_Товары 
    TRUNCATE TABLE "staging"."FACT_Продажи_Товары";
    SELECT MAX(id) into val_LastTargetID FROM "target"."FACT_Продажи_Товары";
    IF NOT val_LastTargetID is NULL AND val_LastTargetID >= 1 THEN
        SELECT pg_get_serial_sequence('staging."FACT_Продажи_Товары"', 'staging_id') INTO val_tmp ;
        val_LastTargetID := val_LastTargetID + 1;
        SELECT setval(val_tmp, val_LastTargetID );
    END IF;
    INSERT INTO staging."FACT_Продажи_Товары" (
        "session_id",
        "source_name",
        "nkey",
        "vkey",
        "start_date",
        "end_date",
        "FACT_ПродажиRefID",
        "Доставка",
        "Товар",
        "Колличество",
        "Цена",
        session_id_update,
        dt_update
    )
    SELECT
        par_session_id AS "session_id",
        val_source_name AS "source_name",
        "nkey",
        nkey AS "vkey",
        val_start_date AS "start_date",
        "fn_GetMaxDate"() AS "end_date",
        "FACT_ПродажиRefID",
        "Доставка",
        "Товар",
        "Колличество",
        "Цена",
        par_session_id AS session_id_update,
        val_start_date AS dt_update
    FROM fdw."odins_FACT_Продажи_Товары" tmp
    WHERE dwh_session_id = val_dwh_session_id;
    GET DIAGNOSTICS var_RowCount = ROW_COUNT;
    par_RowCount := par_RowCount + var_RowCount;
    
END;

$BODY$
LANGUAGE plpgsql;
do
$$
BEGIN
RAISE NOTICE 'Create table target.DIM_Валюты';
END;
$$;

CREATE TABLE IF NOT EXISTS target."DIM_Валюты" (
    id                bigint NOT NULL,
    session_id        bigint NOT NULL,
    source_name       varchar(128) NOT NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NOT NULL,
    end_date          timestamp without time zone NOT NULL,
    "RefID"         uuid  NOT NULL ,
    "DeletionMark"         boolean  NULL ,
    "Code"         varchar(128)  NULL ,
    "Description"         varchar(128)  NULL ,
    "ЗагружаетсяИзИнтернета"         boolean  NULL ,
    "НаименованиеПолное"         varchar(50)  NULL ,
    "Наценка"         decimal(10, 2)  NULL ,
    "ОсновнаяВалюта"         varchar(36)  NULL ,
    "ПараметрыПрописи"         varchar(200)  NULL ,
    "ФормулаРасчетаКурса"         varchar(100)  NULL ,
    "СпособУстановкиКурса"         varchar(500)  NULL ,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone NOT NULL default now(),
    dt_create         timestamp without time zone NOT NULL default now(),
    CONSTRAINT "PK_target_DIM_Валюты" PRIMARY KEY (id));
CREATE UNIQUE INDEX IF NOT EXISTS "IDX_target_DIM_Валюты" ON target."DIM_Валюты" (nkey);
do
$$
BEGIN
RAISE NOTICE 'Create table target.DIM_Валюты_Представления';
END;
$$;

CREATE TABLE IF NOT EXISTS target."DIM_Валюты_Представления" (
    id                bigint NOT NULL,
    session_id        bigint NOT NULL,
    source_name       varchar(128) NOT NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NOT NULL,
    end_date          timestamp without time zone NOT NULL,
    "DIM_ВалютыRefID"         uuid  NOT NULL ,
    "КодЯзыка"         varchar(10)  NULL ,
    "ПараметрыПрописи"         varchar(200)  NULL ,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone NOT NULL default now(),
    dt_create         timestamp without time zone NOT NULL default now(),
    CONSTRAINT "PK_target_DIM_Валюты_Представления" PRIMARY KEY (id));
CREATE UNIQUE INDEX IF NOT EXISTS "IDX_target_DIM_Валюты_Представления" ON target."DIM_Валюты_Представления" (nkey);
do
$$
BEGIN
RAISE NOTICE 'Create table target.DIM_Клиенты';
END;
$$;

CREATE TABLE IF NOT EXISTS target."DIM_Клиенты" (
    id                bigint NOT NULL,
    session_id        bigint NOT NULL,
    source_name       varchar(128) NOT NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NOT NULL,
    end_date          timestamp without time zone NOT NULL,
    "RefID"         uuid  NOT NULL ,
    "DeletionMark"         boolean  NULL ,
    "Code"         varchar(128)  NULL ,
    "Description"         varchar(128)  NULL ,
    "Контакт"         varchar(500)  NULL ,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone NOT NULL default now(),
    dt_create         timestamp without time zone NOT NULL default now(),
    CONSTRAINT "PK_target_DIM_Клиенты" PRIMARY KEY (id));
CREATE UNIQUE INDEX IF NOT EXISTS "IDX_target_DIM_Клиенты" ON target."DIM_Клиенты" (nkey);
do
$$
BEGIN
RAISE NOTICE 'Create table target.DIM_Товары';
END;
$$;

CREATE TABLE IF NOT EXISTS target."DIM_Товары" (
    id                bigint NOT NULL,
    session_id        bigint NOT NULL,
    source_name       varchar(128) NOT NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NOT NULL,
    end_date          timestamp without time zone NOT NULL,
    "RefID"         uuid  NOT NULL ,
    "DeletionMark"         boolean  NULL ,
    "Code"         varchar(128)  NULL ,
    "Description"         varchar(128)  NULL ,
    "Описание"         varchar(255)  NULL ,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone NOT NULL default now(),
    dt_create         timestamp without time zone NOT NULL default now(),
    CONSTRAINT "PK_target_DIM_Товары" PRIMARY KEY (id));
CREATE UNIQUE INDEX IF NOT EXISTS "IDX_target_DIM_Товары" ON target."DIM_Товары" (nkey);
do
$$
BEGIN
RAISE NOTICE 'Create table target.FACT_Продажи';
END;
$$;

CREATE TABLE IF NOT EXISTS target."FACT_Продажи" (
    id                bigint NOT NULL,
    session_id        bigint NOT NULL,
    source_name       varchar(128) NOT NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NOT NULL,
    end_date          timestamp without time zone NOT NULL,
    "RefID"         uuid  NOT NULL ,
    "DeletionMark"         boolean  NULL ,
    "Number"         integer  NULL ,
    "Posted"         boolean  NULL ,
    "Date"         timestamp  NULL ,
    "ДатаОтгрузки"         timestamp  NULL ,
    "Клиент"         varchar(36)  NULL ,
    "ТипДоставки"         varchar(500)  NULL ,
    "ПримерСоставногоТипа"         varchar(36)  NULL ,
    "ПримерСоставногоТипа_ТипЗначения"         varchar(128)  NULL ,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone NOT NULL default now(),
    dt_create         timestamp without time zone NOT NULL default now(),
    CONSTRAINT "PK_target_FACT_Продажи" PRIMARY KEY (id));
CREATE UNIQUE INDEX IF NOT EXISTS "IDX_target_FACT_Продажи" ON target."FACT_Продажи" (nkey);
do
$$
BEGIN
RAISE NOTICE 'Create table target.FACT_Продажи_Товары';
END;
$$;

CREATE TABLE IF NOT EXISTS target."FACT_Продажи_Товары" (
    id                bigint NOT NULL,
    session_id        bigint NOT NULL,
    source_name       varchar(128) NOT NULL,
    nkey              uuid NOT NULL,
    vkey              uuid NOT NULL,
    start_date        timestamp without time zone NOT NULL,
    end_date          timestamp without time zone NOT NULL,
    "FACT_ПродажиRefID"         uuid  NOT NULL ,
    "Доставка"         boolean  NULL ,
    "Товар"         varchar(36)  NULL ,
    "Колличество"         decimal(12, 0)  NULL ,
    "Цена"         decimal(16, 4)  NULL ,
    session_id_update bigint NOT NULL,
    dt_update         timestamp without time zone NOT NULL default now(),
    dt_create         timestamp without time zone NOT NULL default now(),
    CONSTRAINT "PK_target_FACT_Продажи_Товары" PRIMARY KEY (id));
CREATE UNIQUE INDEX IF NOT EXISTS "IDX_target_FACT_Продажи_Товары" ON target."FACT_Продажи_Товары" (nkey);
